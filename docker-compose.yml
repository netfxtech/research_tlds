version: '3'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./es-data
        target: /usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx2048m -Xms2048m"
      discovery.type: single-node
    restart: always

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    environment:
      LS_JAVA_OPTS: "-Xmx2048m -Xms2048m"
    restart: always

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`notpublic`)"
      - "traefik.http.routers.kibana.service=kibana"
      - "traefik.http.routers.kibana.entrypoints=https"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.routers.kibana.tls.certresolver=letsEncrypt"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    restart: always

  traefik:
    image: traefik:latest
    container_name: traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/static/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/conf.d:/conf.d
      - ./traefik/letsencrypt:/letsencrypt
      - ./traefik/log:/log
    environment:
      - TZ=America/Los_Angeles
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`notpublic`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
    restart: always

  nginx:
    image: nginx
    container_name: research_tlds
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx-log:/var/log/nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.research_tlds.rule=Host(`ca-rentrelief.net`)"
      - "traefik.http.routers.research_tlds.service=research_tlds"
      - "traefik.http.routers.research_tlds.entrypoints=https"
      - "traefik.http.routers.research_tlds.tls=true"
      - "traefik.http.routers.research_tlds.tls.certresolver=letsEncrypt"
      - "traefik.http.services.research_tlds.loadbalancer.server.port=80"
    restart: always
